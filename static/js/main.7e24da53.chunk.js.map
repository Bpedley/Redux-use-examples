{"version":3,"sources":["components/Counter/Counter.js","components/Counter/CounterContainer.js","redux/actions/Counter/index.js","redux/actions/Counter/types.js","components/Posts/PostForm/PostForm.js","components/Posts/Post/Post.js","components/Posts/Posts/Posts.js","components/Posts/PostsContainer.js","redux/actions/Posts/index.js","redux/actions/Posts/types.js","redux/reducers/counterReducer.js","redux/reducers/postReducer.js","redux/reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Counter","count","increment","decrement","countValue","setCount","reset","className","value","onChange","onClick","connect","state","counter","input","number","type","payload","e","target","replace","props","PostForm","title","body","setInputFields","createPost","isPosting","onSubmit","name","disabled","Post","data","uniqid","require","Posts","isFetching","posts","map","post","key","items","getPosts","dispatch","fetch","then","res","json","postData","preventDefault","method","JSON","stringify","headers","useEffect","initialState","counterReducer","action","item","postReducer","reducers","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7e24da53.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Counter.scss\";\r\n\r\nconst Counter = ({ count, increment, decrement, countValue, setCount, reset }) => {\r\n  return (\r\n    <div className=\"counter\">\r\n      <h1 className=\"counter-title\">Counter example</h1>\r\n      <span>{count}</span>\r\n      <h3>Change counter by {countValue}</h3>\r\n      <input className=\"counter-input\" value={countValue} onChange={setCount} />\r\n      <br />\r\n      <button className=\"counter-btn\" onClick={() => increment(countValue)}>\r\n        +\r\n      </button>\r\n      <button className=\"counter-btn\" onClick={() => decrement(countValue)}>\r\n        -\r\n      </button>\r\n      <button className=\"counter-btn\" onClick={reset}>\r\n        Reset\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Counter;\r\n","import React from \"react\";\r\nimport Counter from \"./Counter\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  increment,\r\n  decrement,\r\n  reset,\r\n  setCount\r\n} from \"../../redux/actions/Counter\";\r\n\r\nconst CounterContainer = props => {\r\n  return <Counter {...props} />;\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  count: state.counter.count,\r\n  countValue: state.counter.input\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  increment,\r\n  decrement,\r\n  reset,\r\n  setCount\r\n})(CounterContainer);\r\n","import {\r\n  INCREMENT_COUNTER,\r\n  DECREMENT_COUNTER,\r\n  RESET_COUNTER,\r\n  SET_COUNTER\r\n} from \"./types\";\r\n\r\nexport const increment = number => {\r\n  return {\r\n    type: INCREMENT_COUNTER,\r\n    payload: number\r\n  };\r\n};\r\n\r\nexport const decrement = number => {\r\n  return {\r\n    type: DECREMENT_COUNTER,\r\n    payload: number\r\n  };\r\n};\r\n\r\nexport const reset = () => {\r\n  return {\r\n    type: RESET_COUNTER\r\n  };\r\n};\r\n\r\nexport const setCount = e => {\r\n  const value = e.target.value.replace(/\\D/, \"\");\r\n  return {\r\n    type: SET_COUNTER,\r\n    payload: value\r\n  };\r\n};\r\n","export const INCREMENT_COUNTER = \"INCREMENT_COUNTER\";\r\nexport const DECREMENT_COUNTER = \"DECREMENT_COUNTER\";\r\nexport const RESET_COUNTER = \"RESET_COUNTER\";\r\nexport const SET_COUNTER = \"SET_COUNTER\";\r\n","import React from \"react\";\r\nimport \"./PostForm.scss\";\r\n\r\nconst PostForm = ({ title, body, setInputFields, createPost, isPosting }) => {\r\n  return (\r\n    <div className=\"post-form\">\r\n      <h2 className=\"post-form-title\">Add Post</h2>\r\n      <form onSubmit={e => createPost(e, { title, body })}>\r\n        <div>\r\n          <label>\r\n            Title\r\n            <input\r\n              type=\"text\"\r\n              name=\"title\"\r\n              value={title}\r\n              onChange={setInputFields}\r\n            />\r\n          </label>\r\n          <br />\r\n        </div>\r\n        <br />\r\n        <div>\r\n          <label>\r\n            Text\r\n            <textarea name=\"body\" value={body} onChange={setInputFields} />\r\n          </label>\r\n          <br />\r\n        </div>\r\n        <br />\r\n        <button type=\"submit\" className=\"submit-btn\" disabled={isPosting}>\r\n          Submit<div className={isPosting ? \"lds-dual-ring\" : null}></div>\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n","import React from \"react\";\r\nimport \"./Post.scss\";\r\n\r\nconst Post = ({ data }) => {\r\n  return (\r\n    <div className=\"post\">\r\n      <h4 className=\"post-title\">{data.title}</h4>\r\n      <p className=\"post-body\">{data.body}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React from \"react\";\r\nimport Post from \"../Post/Post\";\r\nimport \"./Posts.scss\";\r\n\r\nconst uniqid = require(\"uniqid\");\r\n\r\nconst Posts = ({ isFetching, posts }) => {\r\n  if (isFetching) {\r\n    return <h3>Loading posts...</h3>;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>Posts</h3>\r\n      <div className=\"posts\">\r\n        {posts.map(post => (\r\n          <Post data={post} key={uniqid()} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Posts;\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getPosts,\r\n  setInputFields,\r\n  createPost\r\n} from \"../../redux/actions/Posts\";\r\nimport PostForm from \"./PostForm/PostForm\";\r\nimport Posts from \"./Posts/Posts\";\r\nimport \"./PostsContainer.scss\";\r\n\r\nconst PostsContainer = ({\r\n  getPosts,\r\n  setInputFields,\r\n  createPost,\r\n  posts,\r\n  isFetching,\r\n  title,\r\n  body,\r\n  isPosting\r\n}) => {\r\n  useEffect(() => {\r\n    getPosts();\r\n  }, [getPosts]);\r\n\r\n  return (\r\n    <div>\r\n      <hr />\r\n      <h1>Posts example</h1>\r\n      <PostForm\r\n        title={title}\r\n        body={body}\r\n        setInputFields={setInputFields}\r\n        createPost={createPost}\r\n        isPosting={isPosting}\r\n      />\r\n      <Posts isFetching={isFetching} posts={posts} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  posts: state.posts.items,\r\n  isFetching: state.posts.isFetching,\r\n  title: state.posts.title,\r\n  body: state.posts.body,\r\n  isPosting: state.posts.isPosting\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  getPosts,\r\n  setInputFields,\r\n  createPost\r\n})(PostsContainer);\r\n","import {\r\n  GET_POSTS,\r\n  NEW_POST,\r\n  FETCHING_TOGGLE,\r\n  SET_INPUT_FIELDS,\r\n  IS_POSTING_DATA\r\n} from \"./types\";\r\n\r\nexport const getPosts = () => {\r\n  return dispatch => {\r\n    dispatch({ type: FETCHING_TOGGLE });\r\n    fetch(\r\n      \"https://cors-anywhere.herokuapp.com/http://jsonplaceholder.typicode.com/posts?_limit=20\"\r\n    )\r\n      .then(res => res.json())\r\n      .then(posts => {\r\n        dispatch({\r\n          type: GET_POSTS,\r\n          payload: posts\r\n        });\r\n        dispatch({ type: FETCHING_TOGGLE });\r\n      });\r\n  };\r\n};\r\n\r\nexport const createPost = (e, postData) => {\r\n  e.preventDefault();\r\n  return dispatch => {\r\n    dispatch({ type: IS_POSTING_DATA });\r\n    fetch(\r\n      \"https://cors-anywhere.herokuapp.com/https://jsonplaceholder.typicode.com/posts\",\r\n      {\r\n        method: \"POST\",\r\n        body: JSON.stringify(postData),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n      }\r\n    )\r\n      .then(res => res.json())\r\n      .then(post => {\r\n        dispatch({\r\n          type: NEW_POST,\r\n          payload: post\r\n        });\r\n        dispatch({\r\n          type: IS_POSTING_DATA\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nexport const setInputFields = e => {\r\n  const { name, value } = e.target;\r\n\r\n  return {\r\n    type: SET_INPUT_FIELDS,\r\n    payload: {\r\n      name,\r\n      value\r\n    }\r\n  };\r\n};\r\n","export const GET_POSTS = \"GET_POSTS\";\r\nexport const NEW_POST = \"NEW_POST\";\r\nexport const FETCHING_TOGGLE = \"FETCHING_TOGGLE\";\r\nexport const SET_INPUT_FIELDS = \"SET_INPUT_FIELDS\";\r\nexport const IS_POSTING_DATA = \"IS_POSTING_DATA\";\r\n","import {\r\n  INCREMENT_COUNTER,\r\n  DECREMENT_COUNTER,\r\n  RESET_COUNTER,\r\n  SET_COUNTER\r\n} from \"../actions/Counter/types\";\r\n\r\nconst initialState = {\r\n  count: 0,\r\n  input: 1\r\n};\r\n\r\nconst counterReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case INCREMENT_COUNTER:\r\n      return {\r\n        ...state,\r\n        count: state.count + +action.payload\r\n      };\r\n    case DECREMENT_COUNTER:\r\n      return {\r\n        ...state,\r\n        count: state.count - +action.payload\r\n      };\r\n    case RESET_COUNTER:\r\n      return {\r\n        count: 0,\r\n        input: 1\r\n      };\r\n    case SET_COUNTER:\r\n      return {\r\n        ...state,\r\n        input: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default counterReducer;\r\n","import {\r\n  GET_POSTS,\r\n  NEW_POST,\r\n  FETCHING_TOGGLE,\r\n  SET_INPUT_FIELDS,\r\n  IS_POSTING_DATA\r\n} from \"../actions/Posts/types\";\r\n\r\nconst initialState = {\r\n  items: [],\r\n  item: {},\r\n  title: \"\",\r\n  body: \"\",\r\n  isFetching: false,\r\n  isPosting: false\r\n};\r\n\r\nconst postReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FETCHING_TOGGLE:\r\n      return {\r\n        ...state,\r\n        isFetching: !state.isFetching\r\n      };\r\n    case GET_POSTS:\r\n      return {\r\n        ...state,\r\n        items: action.payload\r\n      };\r\n    case NEW_POST:\r\n      return {\r\n        ...state,\r\n        items: [action.payload, ...state.items],\r\n        item: action.payload,\r\n        title: \"\",\r\n        body: \"\"\r\n      };\r\n    case SET_INPUT_FIELDS:\r\n      const { name, value } = action.payload;\r\n      return {\r\n        ...state,\r\n        [name]: value\r\n      };\r\n    case IS_POSTING_DATA:\r\n      return {\r\n        ...state,\r\n        isPosting: !state.isPosting\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default postReducer;\r\n","import counterReducer from \"./counterReducer\";\r\nimport postReducer from \"./postReducer\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst reducers = combineReducers({\r\n  counter: counterReducer,\r\n  posts: postReducer\r\n});\r\n\r\nexport default reducers;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\nimport reducers from \"./redux/reducers\";\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport \"./App.css\";\n\nimport CounterContainer from \"./components/Counter/CounterContainer\";\nimport PostsContainer from \"./components/Posts/PostsContainer\";\n\nimport store from \"./store\";\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <div className=\"content\">\n        <CounterContainer />\n        <PostsContainer />\n      </div>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}