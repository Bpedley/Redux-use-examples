{"version":3,"sources":["components/Counter/Counter.js","redux/actions/Counter/index.js","redux/actions/Counter/types.js","components/Posts/PostForm/PostForm.js","redux/actions/Posts/index.js","redux/actions/Posts/types.js","components/Posts/Post/Post.js","components/Posts/Posts.js","redux/reducers/counterReducer.js","redux/reducers/postReducer.js","redux/reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Counter","state","input","handleChange","e","setState","target","value","replace","handleIncrement","props","increment","handleDecrement","decrement","handleReset","reset","className","this","count","onChange","onClick","Component","connect","counter","number","type","payload","createPost","postData","dispatch","fetch","method","body","JSON","stringify","headers","Headers","then","res","json","post","useState","title","setTitle","setBody","onSubmit","preventDefault","name","Post","data","uniqid","require","posts","items","fetchPosts","useEffect","map","key","initialState","counterReducer","action","item","postReducer","reducers","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2246fc05.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { increment, decrement, reset } from \"../../redux/actions/Counter\";\r\nimport \"./Counter.scss\";\r\n\r\nclass Counter extends Component {\r\n  state = {\r\n    input: 1\r\n  };\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      input: e.target.value.replace(/\\D/, \"\")\r\n    });\r\n  };\r\n\r\n  handleIncrement = () => {\r\n    this.props.increment(this.state.input);\r\n  };\r\n\r\n  handleDecrement = () => {\r\n    this.props.decrement(this.state.input);\r\n  };\r\n\r\n  handleReset = () => {\r\n    this.setState({ input: 1 });\r\n    this.props.reset();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"counter\">\r\n        <h1 className=\"counter-title\">Counter example</h1>\r\n        <span>{this.props.count}</span>\r\n        <h3>Change counter by {this.state.input}</h3>\r\n        <input\r\n          value={this.state.input}\r\n          onChange={this.handleChange}\r\n          className=\"counter-input\"\r\n        />\r\n        <br />\r\n        <button className=\"counter-btn\" onClick={this.handleIncrement}>\r\n          +\r\n        </button>\r\n        <button className=\"counter-btn\" onClick={this.handleDecrement}>\r\n          -\r\n        </button>\r\n        <button className=\"counter-btn\" onClick={this.handleReset}>\r\n          Reset\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  count: state.counter.count\r\n});\r\n\r\nexport default connect(mapStateToProps, { increment, decrement, reset })(\r\n  Counter\r\n);\r\n","import { INCREMENT_COUNTER, DECREMENT_COUNTER, RESET_COUNTER } from \"./types\";\r\n\r\nexport const increment = number => {\r\n  return {\r\n    type: INCREMENT_COUNTER,\r\n    payload: number\r\n  };\r\n};\r\n\r\nexport const decrement = number => {\r\n  return {\r\n    type: DECREMENT_COUNTER,\r\n    payload: number\r\n  };\r\n};\r\n\r\nexport const reset = () => {\r\n  return {\r\n    type: RESET_COUNTER\r\n  };\r\n};\r\n","export const INCREMENT_COUNTER = \"INCREMENT_COUNTER\";\r\nexport const DECREMENT_COUNTER = \"DECREMENT_COUNTER\";\r\nexport const RESET_COUNTER = \"RESET_COUNTER\";\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createPost } from \"../../../redux/actions/Posts\";\r\nimport \"./PostForm.scss\";\r\n\r\nconst PostForm = ({ createPost }) => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [body, setBody] = useState(\"\");\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    const post = { title, body };\r\n    createPost(post);\r\n  };\r\n\r\n  return (\r\n    <div className=\"post-form\">\r\n      <h2 className=\"post-form-title\">Add Post</h2>\r\n      <form onSubmit={onSubmit}>\r\n        <div>\r\n          <label>\r\n            Title\r\n            <input\r\n              type=\"text\"\r\n              name=\"title\"\r\n              onChange={e => setTitle(e.target.value)}\r\n              value={title}\r\n            />\r\n          </label>\r\n          <br />\r\n        </div>\r\n        <br />\r\n        <div>\r\n          <label>\r\n            Text\r\n            <textarea\r\n              name=\"body\"\r\n              onChange={e => setBody(e.target.value)}\r\n              value={body}\r\n            />\r\n          </label>\r\n          <br />\r\n        </div>\r\n        <br />\r\n        <button type=\"submit\" className=\"submit-btn\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default connect(null, { createPost })(PostForm);\r\n","import { FETCH_POSTS, NEW_POST } from \"./types\";\r\n\r\nexport const fetchPosts = () => {\r\n  return dispatch => {\r\n    fetch(\r\n      \"https://cors-anywhere.herokuapp.com/http://jsonplaceholder.typicode.com/posts?_limit=20\"\r\n    )\r\n      .then(res => res.json())\r\n      .then(posts =>\r\n        dispatch({\r\n          type: FETCH_POSTS,\r\n          payload: posts\r\n        })\r\n      );\r\n  };\r\n};\r\n\r\nexport const createPost = postData => {\r\n  return dispatch => {\r\n    fetch(\r\n      \"https://cors-anywhere.herokuapp.com/https://jsonplaceholder.typicode.com/posts\",\r\n      {\r\n        method: \"POST\",\r\n        body: JSON.stringify(postData),\r\n        headers: new Headers({\r\n          \"Content-Type\": \"application/json\"\r\n        })\r\n      }\r\n    )\r\n      .then(res => res.json())\r\n      .then(post => {\r\n        dispatch({\r\n          type: NEW_POST,\r\n          payload: post\r\n        });\r\n      });\r\n  };\r\n};\r\n","export const FETCH_POSTS = \"FETCH_POSTS\";\r\nexport const NEW_POST = \"NEW_POST\";\r\n","import React from \"react\";\r\nimport \"./Post.scss\";\r\n\r\nconst Post = ({ data }) => {\r\n  return (\r\n    <div className=\"post\">\r\n      <h4 className=\"post-title\">{data.title}</h4>\r\n      <p className=\"post-body\">{data.body}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchPosts } from \"../../redux/actions/Posts\";\r\nimport PostForm from \"./PostForm/PostForm\";\r\nimport Post from \"./Post/Post\";\r\nimport \"./Posts.scss\";\r\n\r\nconst uniqid = require(\"uniqid\");\r\n\r\nconst Posts = ({ fetchPosts, posts }) => {\r\n  useEffect(() => {\r\n    fetchPosts();\r\n  }, [fetchPosts]);\r\n\r\n  return (\r\n    <div>\r\n      <hr />\r\n      <h1 className=\"posts-title\">Posts example</h1>\r\n      <PostForm />\r\n      <h3>Posts</h3>\r\n      <div className=\"posts\">\r\n        {posts.map(post => (\r\n          <Post data={post} key={uniqid()} />\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  posts: state.posts.items\r\n});\r\n\r\nexport default connect(mapStateToProps, { fetchPosts })(Posts);\r\n","import {\r\n  INCREMENT_COUNTER,\r\n  DECREMENT_COUNTER,\r\n  RESET_COUNTER\r\n} from \"../actions/Counter/types\";\r\n\r\nconst initialState = {\r\n  count: 0\r\n};\r\n\r\nconst counterReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case INCREMENT_COUNTER:\r\n      return {\r\n        ...state,\r\n        count: state.count + +action.payload\r\n      };\r\n    case DECREMENT_COUNTER:\r\n      return {\r\n        ...state,\r\n        count: state.count - +action.payload\r\n      };\r\n    case RESET_COUNTER:\r\n      return {\r\n        ...state,\r\n        count: 0\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default counterReducer;\r\n","import { FETCH_POSTS, NEW_POST } from \"../actions/Posts/types\";\r\n\r\nconst initialState = {\r\n  items: [],\r\n  item: {}\r\n};\r\n\r\nconst postReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_POSTS:\r\n      return {\r\n        ...state,\r\n        items: action.payload\r\n      };\r\n    case NEW_POST:\r\n      return {\r\n        ...state,\r\n        items: [action.payload, ...state.items],\r\n        item: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default postReducer;\r\n","import counterReducer from \"./counterReducer\";\r\nimport postReducer from \"./postReducer\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst reducers = combineReducers({\r\n  counter: counterReducer,\r\n  posts: postReducer\r\n});\r\n\r\nexport default reducers;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\nimport reducers from \"./redux/reducers\";\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport \"./App.css\";\n\nimport Counter from \"./components/Counter/Counter\";\nimport Posts from \"./components/Posts/Posts\";\n\nimport store from \"./store\";\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <div className=\"content\">\n        <Counter />\n        <Posts />\n      </div>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}