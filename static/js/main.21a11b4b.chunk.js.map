{"version":3,"sources":["components/Counter/Counter.js","redux/actions/Counter/index.js","redux/actions/Counter/types.js","components/Posts/PostForm/PostForm.js","components/Posts/Post/Post.js","components/Posts/Posts.js","redux/actions/Posts/index.js","redux/actions/Posts/types.js","redux/reducers/counterReducer.js","redux/reducers/postReducer.js","redux/reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["connect","state","count","counter","increment","number","type","payload","decrement","reset","useState","input","setInput","className","value","onChange","e","target","replace","onClick","PostForm","createPost","title","setTitle","body","setBody","onSubmit","preventDefault","name","Post","data","uniqid","require","posts","items","isFetching","fetchPosts","dispatch","fetch","then","res","json","requestPosts","postData","method","JSON","stringify","headers","post","useEffect","map","key","initialState","counterReducer","action","item","postReducer","reducers","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.21a11b4b.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { increment, decrement, reset } from \"../../redux/actions/Counter\";\r\nimport \"./Counter.scss\";\r\n\r\nconst Counter = ({ increment, decrement, reset, count }) => {\r\n  const [input, setInput] = useState(1);\r\n\r\n  const handleReset = () => {\r\n    setInput(1);\r\n    reset();\r\n  };\r\n\r\n  const handleInputChange = e => {\r\n    const value = e.target.value.replace(/\\D/, \"\");\r\n    setInput(value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"counter\">\r\n      <h1 className=\"counter-title\">Counter example</h1>\r\n      <span>{count}</span>\r\n      <h3>Change counter by {input}</h3>\r\n      <input\r\n        className=\"counter-input\"\r\n        value={input}\r\n        onChange={handleInputChange}\r\n      />\r\n      <br />\r\n      <button className=\"counter-btn\" onClick={() => increment(input)}>\r\n        +\r\n      </button>\r\n      <button className=\"counter-btn\" onClick={() => decrement(input)}>\r\n        -\r\n      </button>\r\n      <button className=\"counter-btn\" onClick={handleReset}>\r\n        Reset\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  count: state.counter.count\r\n});\r\n\r\nexport default connect(mapStateToProps, { increment, decrement, reset })(\r\n  Counter\r\n);\r\n","import { INCREMENT_COUNTER, DECREMENT_COUNTER, RESET_COUNTER } from \"./types\";\r\n\r\nexport const increment = number => {\r\n  return {\r\n    type: INCREMENT_COUNTER,\r\n    payload: number\r\n  };\r\n};\r\n\r\nexport const decrement = number => {\r\n  return {\r\n    type: DECREMENT_COUNTER,\r\n    payload: number\r\n  };\r\n};\r\n\r\nexport const reset = () => {\r\n  return {\r\n    type: RESET_COUNTER\r\n  };\r\n};\r\n","export const INCREMENT_COUNTER = \"INCREMENT_COUNTER\";\r\nexport const DECREMENT_COUNTER = \"DECREMENT_COUNTER\";\r\nexport const RESET_COUNTER = \"RESET_COUNTER\";\r\n","import React, { useState } from \"react\";\r\nimport \"./PostForm.scss\";\r\n\r\nconst PostForm = ({ createPost }) => {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [body, setBody] = useState(\"\");\r\n\r\n  const onSubmit = e => {\r\n    e.preventDefault();\r\n    const post = { title, body };\r\n    createPost(post);\r\n    setTitle(\"\");\r\n    setBody(\"\");\r\n  };\r\n\r\n  return (\r\n    <div className=\"post-form\">\r\n      <h2 className=\"post-form-title\">Add Post</h2>\r\n      <form onSubmit={onSubmit}>\r\n        <div>\r\n          <label>\r\n            Title\r\n            <input\r\n              type=\"text\"\r\n              name=\"title\"\r\n              onChange={e => setTitle(e.target.value)}\r\n              value={title}\r\n            />\r\n          </label>\r\n          <br />\r\n        </div>\r\n        <br />\r\n        <div>\r\n          <label>\r\n            Text\r\n            <textarea\r\n              name=\"body\"\r\n              onChange={e => setBody(e.target.value)}\r\n              value={body}\r\n            />\r\n          </label>\r\n          <br />\r\n        </div>\r\n        <br />\r\n        <button type=\"submit\" className=\"submit-btn\">\r\n          Submit\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n","import React from \"react\";\r\nimport \"./Post.scss\";\r\n\r\nconst Post = ({ data }) => {\r\n  return (\r\n    <div className=\"post\">\r\n      <h4 className=\"post-title\">{data.title}</h4>\r\n      <p className=\"post-body\">{data.body}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Post;\r\n","import React, { useEffect } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  fetchPosts,\r\n  requestPosts,\r\n  createPost\r\n} from \"../../redux/actions/Posts\";\r\nimport PostForm from \"./PostForm/PostForm\";\r\nimport Post from \"./Post/Post\";\r\nimport \"./Posts.scss\";\r\n\r\nconst uniqid = require(\"uniqid\");\r\n\r\nconst Posts = ({ fetchPosts, requestPosts, createPost, posts, isFetching }) => {\r\n  useEffect(() => {\r\n    requestPosts();\r\n    fetchPosts();\r\n  }, [fetchPosts, requestPosts]);\r\n\r\n  return (\r\n    <div>\r\n      <hr />\r\n      <h1 className=\"posts-title\">Posts example</h1>\r\n      <PostForm createPost={createPost} />\r\n      {isFetching ? (\r\n        <h3>Loading posts...</h3>\r\n      ) : (\r\n        <div>\r\n          <h3>Posts</h3>\r\n          <div className=\"posts\">\r\n            {posts.map(post => (\r\n              <Post data={post} key={uniqid()} />\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  posts: state.posts.items,\r\n  isFetching: state.posts.isFetching\r\n});\r\n\r\nexport default connect(mapStateToProps, {\r\n  fetchPosts,\r\n  requestPosts,\r\n  createPost\r\n})(Posts);\r\n","import { FETCH_POSTS, NEW_POST, REQUEST_POSTS } from \"./types\";\r\n\r\nexport const fetchPosts = () => {\r\n  return dispatch => {\r\n    fetch(\r\n      \"https://cors-anywhere.herokuapp.com/http://jsonplaceholder.typicode.com/posts?_limit=20\"\r\n    )\r\n      .then(res => res.json())\r\n      .then(posts =>\r\n        dispatch({\r\n          type: FETCH_POSTS,\r\n          payload: posts\r\n        })\r\n      );\r\n  };\r\n};\r\n\r\nexport const createPost = postData => {\r\n  return dispatch => {\r\n    fetch(\r\n      \"https://cors-anywhere.herokuapp.com/https://jsonplaceholder.typicode.com/posts\",\r\n      {\r\n        method: \"POST\",\r\n        body: JSON.stringify(postData),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\"\r\n        }\r\n      }\r\n    )\r\n      .then(res => res.json())\r\n      .then(post => {\r\n        dispatch({\r\n          type: NEW_POST,\r\n          payload: post\r\n        });\r\n      });\r\n  };\r\n};\r\n\r\nexport const requestPosts = () => {\r\n  return {\r\n    type: REQUEST_POSTS\r\n  };\r\n};\r\n","export const FETCH_POSTS = \"FETCH_POSTS\";\r\nexport const NEW_POST = \"NEW_POST\";\r\nexport const REQUEST_POSTS = \"REQUEST_POSTS\";\r\n","import {\r\n  INCREMENT_COUNTER,\r\n  DECREMENT_COUNTER,\r\n  RESET_COUNTER\r\n} from \"../actions/Counter/types\";\r\n\r\nconst initialState = {\r\n  count: 0\r\n};\r\n\r\nconst counterReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case INCREMENT_COUNTER:\r\n      return {\r\n        ...state,\r\n        count: state.count + +action.payload\r\n      };\r\n    case DECREMENT_COUNTER:\r\n      return {\r\n        ...state,\r\n        count: state.count - +action.payload\r\n      };\r\n    case RESET_COUNTER:\r\n      return {\r\n        ...state,\r\n        count: 0\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default counterReducer;\r\n","import { FETCH_POSTS, NEW_POST, REQUEST_POSTS } from \"../actions/Posts/types\";\r\n\r\nconst initialState = {\r\n  items: [],\r\n  item: {},\r\n  isFetching: false\r\n};\r\n\r\nconst postReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case REQUEST_POSTS:\r\n      return {\r\n        ...state,\r\n        isFetching: true\r\n      };\r\n    case FETCH_POSTS:\r\n      return {\r\n        ...state,\r\n        items: action.payload,\r\n        isFetching: false\r\n      };\r\n    case NEW_POST:\r\n      return {\r\n        ...state,\r\n        items: [action.payload, ...state.items],\r\n        item: action.payload\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default postReducer;\r\n","import counterReducer from \"./counterReducer\";\r\nimport postReducer from \"./postReducer\";\r\nimport { combineReducers } from \"redux\";\r\n\r\nconst reducers = combineReducers({\r\n  counter: counterReducer,\r\n  posts: postReducer\r\n});\r\n\r\nexport default reducers;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport thunk from \"redux-thunk\";\r\nimport reducers from \"./redux/reducers\";\r\n\r\nconst store = createStore(\r\n  reducers,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport { Provider } from \"react-redux\";\nimport \"./App.css\";\n\nimport Counter from \"./components/Counter/Counter\";\nimport Posts from \"./components/Posts/Posts\";\n\nimport store from \"./store\";\n\nconst App = () => {\n  return (\n    <Provider store={store}>\n      <div className=\"content\">\n        <Counter />\n        <Posts />\n      </div>\n    </Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}